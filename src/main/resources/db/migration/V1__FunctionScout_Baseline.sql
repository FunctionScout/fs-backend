CREATE DATABASE IF NOT EXISTS function_scout;

CREATE TABLE IF NOT EXISTS WebService (
	id INT PRIMARY KEY AUTO_INCREMENT,
	uuid VARCHAR(64) NOT NULL,
	githubUrl VARCHAR(512) NOT NULL,
	name VARCHAR(512) NULL,
	status TINYINT(3) NOT NULL,
	uniqueHash VARCHAR(64) NOT NULL,
	message VARCHAR(512) NULL,
	createDT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,
	updateDT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,
	UNIQUE(githubUrl, uniqueHash)
);

CREATE TABLE IF NOT EXISTS Dependency (
	id INT PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(512) NOT NULL,
	version VARCHAR(64) NULL,
	type TINYINT(2) NULL,
	createDT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,
	updateDT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,
	UNIQUE(name, version)
);

CREATE TABLE IF NOT EXISTS WebServiceDependency (
    id INT PRIMARY KEY AUTO_INCREMENT,
    serviceId INT NOT NULL,
    dependencyId INT NOT NULL,
    FOREIGN KEY (serviceId) REFERENCES WebService(id) ON DELETE CASCADE,
    FOREIGN KEY (dependencyId) REFERENCES Dependency(id) ON DELETE CASCADE,
    UNIQUE(serviceId, dependencyId)
);

CREATE TABLE IF NOT EXISTS Class (
	id INT PRIMARY KEY AUTO_INCREMENT,
    serviceId INT NOT NULL,
    name VARCHAR(64) NOT NULL,
	createDT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,
	updateDT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,
	FOREIGN KEY (serviceId) REFERENCES WebService(id) ON DELETE CASCADE,
	UNIQUE(serviceId, name)
);

CREATE TABLE IF NOT EXISTS `Function` (
	id INT PRIMARY KEY AUTO_INCREMENT,
	uuid VARCHAR(64) NOT NULL,
    classId INT NOT NULL,
    name VARCHAR(64) NOT NULL,
	signature VARCHAR(512) NOT NULL,
	returnType VARCHAR(64) NOT NULL,
	createDT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,
	updateDT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL,
	FOREIGN KEY (classId) REFERENCES Class(id) ON DELETE CASCADE,
	UNIQUE(classId, signature)
);

CREATE TABLE IF NOT EXISTS WebServiceFunctionDependency (
	id INT PRIMARY KEY AUTO_INCREMENT,
    dependentServiceId INT NOT NULL,
    dependingServiceId INT NOT NULL,
    functionId INT NOT NULL,
    FOREIGN KEY (dependentServiceId) REFERENCES WebService(id) ON DELETE CASCADE,
    FOREIGN KEY (dependingServiceId) REFERENCES Dependency(id) ON DELETE CASCADE,
    FOREIGN KEY (functionId) REFERENCES `Function`(id) ON DELETE CASCADE,
    UNIQUE(dependentServiceId, dependingServiceId, functionId)
);